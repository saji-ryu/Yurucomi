{"version":3,"sources":["../src/server/yurucomi.ts"],"names":["debug","Yurucomi","io","linda","Linda","watchOperation","callback","tupleSpace","tsName","watch","res","writeOperation","write","readOperation","read","on","socket","data","resData","emit","_from","request","session","userName","newSettingsData","matchedUsers","includes"],"mappings":";;;;;;;AAAA;;AASA;;AACA;;AACA;;;;;;;;;;;;;;;;AACA,IAAMA,KAAK,GAAG,qBAAO,iBAAP,CAAd;;IAEqBC,Q;;;AAGnB,oBAAYC,EAAZ,EAAiC;AAAA;;AAAA;;AAAA;;AAC/B,SAAKA,EAAL,GAAUA,EAAV;AACA,SAAKC,KAAL,GAAa,IAAIC,oBAAJ,EAAb;AACD;;;;0BAECC,c,EACAC,Q,EACA;AACA,WAAKH,KAAL,CACGI,UADH,CACcF,cAAc,CAACG,MAD7B,EAEGC,KAFH,CAESJ,cAFT;AAAA;AAAA;AAAA,qCAEyB,WAAMK,GAAN,EAAa;AAClCJ,UAAAA,QAAQ,CAACI,GAAD,CAAR;AACD,SAJH;;AAAA;AAAA;AAAA;AAAA;AAKD;;;0BAECC,c,EACAL,Q,EACA;AACA,WAAKH,KAAL,CAAWI,UAAX,CAAsBI,cAAc,CAACH,MAArC,EAA6CI,KAA7C,CAAmDD,cAAnD,EAAmE,UAAAD,GAAG,EAAI;AACxEJ,QAAAA,QAAQ,CAACI,GAAD,CAAR;AACD,OAFD;AAGD;;;yBAECG,a,EACAP,Q,EACA;AACA,WAAKH,KAAL,CAAWI,UAAX,CAAsBM,aAAa,CAACL,MAApC,EAA4CM,IAA5C,CAAiDD,aAAjD,EAAgE,UAAAH,GAAG,EAAI;AACrEJ,QAAAA,QAAQ,CAACI,GAAD,CAAR;AACD,OAFD;AAGD;;;6BACQ;AAAA;;AACP,WAAKR,EAAL,CAAQa,EAAR,CAAW,YAAX,EAAyB,UAACC,MAAD,EAA6B;AACpDhB,QAAAA,KAAK,CAAC,kBAAD,CAAL;AACAgB,QAAAA,MAAM,CAACD,EAAP,CAAU,iBAAV,EAA6B,UAACE,IAAD,EAA8B;AACzD,UAAA,KAAI,CAACH,IAAL,CAAUG,IAAV,EAAgB,UAACC,OAAD,EAA4B;AAC1CF,YAAAA,MAAM,CAACG,IAAP,CAAY,gBAAZ,EAA8BD,OAA9B;AACD,WAFD;AAGD,SAJD;AAKAF,QAAAA,MAAM,CAACD,EAAP,CAAU,kBAAV,EAA8B,UAACE,IAAD,EAA+B;AAC3D,UAAA,KAAI,CAACL,KAAL,CAAWK,IAAX,EAAiB,UAACC,OAAD,EAAyB;AACxCF,YAAAA,MAAM,CAACG,IAAP,CAAY,iBAAZ,EAA+BD,OAA/B;AACD,WAFD;AAGD,SAJD;AAKAF,QAAAA,MAAM,CAACD,EAAP,CAAU,kBAAV,EAA8B,UAACE,IAAD,EAA0B;AACtD,UAAA,KAAI,CAACR,KAAL,CAAWQ,IAAX;AAAA;AAAA;AAAA,0CAAiB,WAAOC,OAAP,EAAuC;AACtD,kBAAIA,OAAO,CAACE,KAAR,KAAkBJ,MAAM,CAACK,OAAP,CAAeC,OAAf,CAAuBC,QAA7C,EAAuD;AACrD,oBAAMC,eAAe,SAAS,6BAAgBN,OAAhB,CAA9B;AACAF,gBAAAA,MAAM,CAACG,IAAP,CAAY,kBAAZ,EAAgCK,eAAhC;AACD,eAHD,MAGO;AACL,oBAAMC,YAA2B,SAAS,8BAAgBP,OAAhB,CAA1C;;AACA,oBAAIO,YAAY,CAACC,QAAb,CAAsBV,MAAM,CAACK,OAAP,CAAeC,OAAf,CAAuBC,QAA7C,CAAJ,EAA4D;AAC1DP,kBAAAA,MAAM,CAACG,IAAP,CAAY,aAAZ,EAA2BD,OAA3B;AACD;AACF;AACF,aAVD;;AAAA;AAAA;AAAA;AAAA;AAWD,SAZD;AAaD,OAzBD;AA0BD","sourcesContent":["import { Linda } from \"yurucomi-linda\";\nimport {\n  WatchResponseTuple,\n  LindaReadOperation,\n  LindaWriteOperation,\n  LindaOperation,\n  InsertData,\n  ResponseTuple,\n} from \"yurucomi-linda/src/interfaces\";\nimport settingsUpdater from \"./settingUpdater\";\nimport checkMatchUsers from \"./checkMatchUsers\";\nimport _debug from \"debug\";\nconst debug = _debug(\"linda-connector\");\n\nexport default class Yurucomi {\n  io: SocketIO.Server;\n  linda: Linda;\n  constructor(io: SocketIO.Server) {\n    this.io = io;\n    this.linda = new Linda();\n  }\n  watch(\n    watchOperation: LindaOperation,\n    callback: (res: WatchResponseTuple) => void\n  ) {\n    this.linda\n      .tupleSpace(watchOperation.tsName)\n      .watch(watchOperation, async res => {\n        callback(res);\n      });\n  }\n  write(\n    writeOperation: LindaWriteOperation,\n    callback: (res: InsertData) => void\n  ) {\n    this.linda.tupleSpace(writeOperation.tsName).write(writeOperation, res => {\n      callback(res);\n    });\n  }\n  read(\n    readOperation: LindaReadOperation,\n    callback: (res: ResponseTuple) => void\n  ) {\n    this.linda.tupleSpace(readOperation.tsName).read(readOperation, res => {\n      callback(res);\n    });\n  }\n  listen() {\n    this.io.on(\"connection\", (socket: SocketIO.Socket) => {\n      debug(\"linda listenning\");\n      socket.on(\"_read_operation\", (data: LindaReadOperation) => {\n        this.read(data, (resData: ResponseTuple) => {\n          socket.emit(\"_read_response\", resData);\n        });\n      });\n      socket.on(\"_write_operation\", (data: LindaWriteOperation) => {\n        this.write(data, (resData: InsertData) => {\n          socket.emit(\"_write_response\", resData);\n        });\n      });\n      socket.on(\"_watch_operation\", (data: LindaOperation) => {\n        this.watch(data, async (resData: WatchResponseTuple) => {\n          if (resData._from === socket.request.session.userName) {\n            const newSettingsData = await settingsUpdater(resData);\n            socket.emit(\"_settings_update\", newSettingsData);\n          } else {\n            const matchedUsers: Array<string> = await checkMatchUsers(resData);\n            if (matchedUsers.includes(socket.request.session.userName)) {\n              socket.emit(\"_new_events\", resData);\n            }\n          }\n        });\n      });\n    });\n  }\n}\n"],"file":"yurucomi.js"}