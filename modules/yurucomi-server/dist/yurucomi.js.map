{"version":3,"sources":["../src/server/yurucomi.ts"],"names":["debug","Yurucomi","io","linda","Linda","watchOperation","callback","tupleSpace","tsName","watch","res","writeOperation","write","readOperation","read","on","socket","data","resData","emit","console","log","lindaWtachOperation","Object","assign","payload","emitter","settings","who","request","session","userName","icon","_where","_from","returnData","_fromIcon","matchedUsers","includes"],"mappings":";;;;;;;AAAA;;AAUA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AACA,IAAMA,KAAK,GAAG,qBAAO,iBAAP,CAAd;;IAEqBC,Q;;;AAGnB,oBAAYC,EAAZ,EAAiC;AAAA;;AAAA;;AAAA;;AAC/B,SAAKA,EAAL,GAAUA,EAAV;AACA,SAAKC,KAAL,GAAa,IAAIC,cAAJ,EAAb;AACD;AACD;;;;;;;;0BAKEC,c,EACAC,Q,EACA;AACA,WAAKH,KAAL,CACGI,UADH,CACcF,cAAc,CAACG,MAD7B,EAEGC,KAFH,CAESJ,cAFT;AAAA;AAAA;AAAA,qCAEyB,WAAMK,GAAN,EAAa;AAClCJ,UAAAA,QAAQ,CAACI,GAAD,CAAR;AACD,SAJH;;AAAA;AAAA;AAAA;AAAA;AAKD;;;0BAECC,c,EACAL,Q,EACA;AACA,WAAKH,KAAL,CACGI,UADH,CACcI,cAAc,CAACH,MAD7B,EAEGI,KAFH,CAESD,cAFT;AAAA;AAAA;AAAA,sCAEyB,WAAMD,GAAN,EAAa;AAClC,uCAAgBA,GAAhB;AACAJ,UAAAA,QAAQ,CAACI,GAAD,CAAR;AACD,SALH;;AAAA;AAAA;AAAA;AAAA;AAMD;;;yBAECG,a,EACAP,Q,EACA;AACA,WAAKH,KAAL,CAAWI,UAAX,CAAsBM,aAAa,CAACL,MAApC,EAA4CM,IAA5C,CAAiDD,aAAjD,EAAgE,UAAAH,GAAG,EAAI;AACrEJ,QAAAA,QAAQ,CAACI,GAAD,CAAR;AACD,OAFD;AAGD;;;6BACQ;AAAA;;AACP,WAAKR,EAAL,CAAQa,EAAR,CAAW,YAAX,EAAyB,UAACC,MAAD,EAA6B;AACpDhB,QAAAA,KAAK,CAAC,kBAAD,CAAL;AACAgB,QAAAA,MAAM,CAACD,EAAP,CAAU,iBAAV,EAA6B,UAACE,IAAD,EAA8B;AACzD,UAAA,KAAI,CAACH,IAAL,CAAUG,IAAV,EAAgB,UAACC,OAAD,EAA4B;AAC1CF,YAAAA,MAAM,CAACG,IAAP,CAAY,gBAAZ,EAA8BD,OAA9B;AACD,WAFD;AAGD,SAJD;AAKAF,QAAAA,MAAM,CAACD,EAAP,CAAU,kBAAV,EAA8B,UAACE,IAAD,EAA+B;AAC3D,UAAA,KAAI,CAACL,KAAL,CAAWK,IAAX,EAAiB,UAACC,OAAD,EAAyB;AACxCF,YAAAA,MAAM,CAACG,IAAP,CAAY,iBAAZ,EAA+BD,OAA/B;AACD,WAFD;AAGD,SAJD;AAKAF,QAAAA,MAAM,CAACD,EAAP,CAAU,iBAAV,EAA6B,UAACE,IAAD,EAA6B;AACxDG,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,IAApB;AACA,+CAAuBA,IAAvB;AACD,SAHD;AAIAD,QAAAA,MAAM,CAACD,EAAP,CAAU,kBAAV,EAA8B,UAACE,IAAD,EAAkC;AAC9D,cAAMK,mBAAmB,GAAGC,MAAM,CAACC,MAAP,CAAcP,IAAd,EAAoB;AAAEQ,YAAAA,OAAO,EAAE;AAAX,WAApB,CAA5B;;AACAC,gCAAQX,EAAR,CAAW,iBAAX,EAA8B,UAAAY,QAAQ,EAAI;AACxC,gBAAIA,QAAQ,CAACC,GAAT,KAAiBZ,MAAM,CAACa,OAAP,CAAeC,OAAf,CAAuBC,QAA5C,EAAsD;AACpDf,cAAAA,MAAM,CAACG,IAAP,CAAY,iBAAZ,EAA+BQ,QAA/B;AACD;AACF,WAJD;;AAKA,UAAA,KAAI,CAAClB,KAAL,CAAWa,mBAAX;AAAA;AAAA;AAAA,0CAAgC,WAAOJ,OAAP,EAAuC;AACrE,kBAAMc,IAAY,SAAS,0BAAYd,OAAO,CAACe,MAApB,EAA4Bf,OAAO,CAACgB,KAApC,CAA3B;AACA,kBAAMC,UAAU,GAAGZ,MAAM,CAACC,MAAP,CAAcN,OAAd,EAAuB;AAAEkB,gBAAAA,SAAS,EAAEJ;AAAb,eAAvB,CAAnB;AACA,kBAAMK,YAA2B,SAAS,8BAAgBnB,OAAhB,CAA1C;;AACA,kBAAImB,YAAY,CAACC,QAAb,CAAsBtB,MAAM,CAACa,OAAP,CAAeC,OAAf,CAAuBC,QAA7C,CAAJ,EAA4D;AAC1Df,gBAAAA,MAAM,CAACG,IAAP,CAAY,YAAZ,EAA0BgB,UAA1B;AACD;AACF,aAPD;;AAAA;AAAA;AAAA;AAAA;AAQD,SAfD;AAgBD,OAhCD;AAiCD","sourcesContent":["import Linda from \"../linda\";\nimport {\n  WatchResponseTuple,\n  LindaReadOperation,\n  LindaWriteOperation,\n  LindaWatchOperation,\n  InsertData,\n  ResponseTuple,\n} from \"../linda/interfaces\";\nimport { YurucomiWatchOperation, SettingUpdateData } from \"yurucomi-interfaces\";\nimport settingsUpdater from \"./settingUpdater\";\nimport checkMatchUsers from \"./checkMatchUsers\";\nimport emitter from \"./eventEmitter\";\nimport getUserIcon from \"./getUserIcon\";\nimport mergeLocalSettingsData from \"./mergeLocalSettingsData\";\nimport _debug from \"debug\";\nconst debug = _debug(\"linda-connector\");\n\nexport default class Yurucomi {\n  io: SocketIO.Server;\n  linda: Linda;\n  constructor(io: SocketIO.Server) {\n    this.io = io;\n    this.linda = new Linda();\n  }\n  /*\n  connct関数を作りたい\n  lindaとyurucomiの各メソッドを繋げる\n  */\n  watch(\n    watchOperation: LindaWatchOperation,\n    callback: (res: WatchResponseTuple) => void\n  ) {\n    this.linda\n      .tupleSpace(watchOperation.tsName)\n      .watch(watchOperation, async res => {\n        callback(res);\n      });\n  }\n  write(\n    writeOperation: LindaWriteOperation,\n    callback: (res: InsertData) => void\n  ) {\n    this.linda\n      .tupleSpace(writeOperation.tsName)\n      .write(writeOperation, async res => {\n        settingsUpdater(res);\n        callback(res);\n      });\n  }\n  read(\n    readOperation: LindaReadOperation,\n    callback: (res: ResponseTuple) => void\n  ) {\n    this.linda.tupleSpace(readOperation.tsName).read(readOperation, res => {\n      callback(res);\n    });\n  }\n  listen() {\n    this.io.on(\"connection\", (socket: SocketIO.Socket) => {\n      debug(\"linda listenning\");\n      socket.on(\"_read_operation\", (data: LindaReadOperation) => {\n        this.read(data, (resData: ResponseTuple) => {\n          socket.emit(\"_read_response\", resData);\n        });\n      });\n      socket.on(\"_write_operation\", (data: LindaWriteOperation) => {\n        this.write(data, (resData: InsertData) => {\n          socket.emit(\"_write_response\", resData);\n        });\n      });\n      socket.on(\"_local_settings\", (data: SettingUpdateData) => {\n        console.log(\"data\", data);\n        mergeLocalSettingsData(data);\n      });\n      socket.on(\"_watch_operation\", (data: YurucomiWatchOperation) => {\n        const lindaWtachOperation = Object.assign(data, { payload: {} });\n        emitter.on(\"setting_updated\", settings => {\n          if (settings.who === socket.request.session.userName) {\n            socket.emit(\"_setting_update\", settings);\n          }\n        });\n        this.watch(lindaWtachOperation, async (resData: WatchResponseTuple) => {\n          const icon: string = await getUserIcon(resData._where, resData._from);\n          const returnData = Object.assign(resData, { _fromIcon: icon });\n          const matchedUsers: Array<string> = await checkMatchUsers(resData);\n          if (matchedUsers.includes(socket.request.session.userName)) {\n            socket.emit(\"_new_event\", returnData);\n          }\n        });\n      });\n    });\n  }\n}\n"],"file":"yurucomi.js"}